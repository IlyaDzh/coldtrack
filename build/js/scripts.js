"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * JavaScript Cookie v2.2.0
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
!function (e) {
  var n = !1;

  if ("function" == typeof define && define.amd && (define(e), n = !0), "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && (module.exports = e(), n = !0), !n) {
    var o = window.Cookies,
        t = window.Cookies = e();

    t.noConflict = function () {
      return window.Cookies = o, t;
    };
  }
}(function () {
  function e() {
    for (var e = 0, n = {}; e < arguments.length; e++) {
      var o = arguments[e];

      for (var t in o) {
        n[t] = o[t];
      }
    }

    return n;
  }

  return function n(o) {
    function t(n, r, i) {
      var c;

      if ("undefined" != typeof document) {
        if (arguments.length > 1) {
          if ("number" == typeof (i = e({
            path: "/"
          }, t.defaults, i)).expires) {
            var a = new Date();
            a.setMilliseconds(a.getMilliseconds() + 864e5 * i.expires), i.expires = a;
          }

          i.expires = i.expires ? i.expires.toUTCString() : "";

          try {
            c = JSON.stringify(r), /^[\{\[]/.test(c) && (r = c);
          } catch (e) {}

          r = o.write ? o.write(r, n) : encodeURIComponent(String(r)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent), n = (n = (n = encodeURIComponent(String(n))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
          var s = "";

          for (var f in i) {
            i[f] && (s += "; " + f, !0 !== i[f] && (s += "=" + i[f]));
          }

          return document.cookie = n + "=" + r + s;
        }

        n || (c = {});

        for (var p = document.cookie ? document.cookie.split("; ") : [], d = /(%[0-9A-Z]{2})+/g, u = 0; u < p.length; u++) {
          var l = p[u].split("="),
              C = l.slice(1).join("=");
          this.json || '"' !== C.charAt(0) || (C = C.slice(1, -1));

          try {
            var g = l[0].replace(d, decodeURIComponent);
            if (C = o.read ? o.read(C, g) : o(C, g) || C.replace(d, decodeURIComponent), this.json) try {
              C = JSON.parse(C);
            } catch (e) {}

            if (n === g) {
              c = C;
              break;
            }

            n || (c[g] = C);
          } catch (e) {}
        }

        return c;
      }
    }

    return t.set = t, t.get = function (e) {
      return t.call(t, e);
    }, t.getJSON = function () {
      return t.apply({
        json: !0
      }, [].slice.call(arguments));
    }, t.defaults = {}, t.remove = function (n, o) {
      t(n, "", e(o, {
        expires: -1
      }));
    }, t.withConverter = n, t;
  }(function () {});
});
/**
 * Copyright (c) 2010,2011,2012,2013,2014 Morgan Roderick http://roderick.dk
 * License: MIT - http://mrgnrdrck.mit-license.org
 *
 * https://github.com/mroderick/PubSubJS
 */

!function (n, t) {
  "use strict";

  var r = {};
  n.PubSub = r;
  var e = n.define;
  !function (n) {
    var t = {},
        r = -1;

    function e(n) {
      var t;

      for (t in n) {
        if (n.hasOwnProperty(t)) return !0;
      }

      return !1;
    }

    function o(n, t, r) {
      try {
        n(t, r);
      } catch (n) {
        setTimeout(function (n) {
          return function () {
            throw n;
          };
        }(n), 0);
      }
    }

    function i(n, t, r) {
      n(t, r);
    }

    function u(n, r, e, u) {
      var f,
          s = t[r],
          c = u ? i : o;
      if (t.hasOwnProperty(r)) for (f in s) {
        s.hasOwnProperty(f) && c(s[f], n, e);
      }
    }

    function f(n, r, o, i) {
      var f = function (n, t, r) {
        return function () {
          var e = String(n),
              o = e.lastIndexOf(".");

          for (u(n, n, t, r); -1 !== o;) {
            e = e.substr(0, o), o = e.lastIndexOf("."), u(n, e, t, r);
          }
        };
      }(n = "symbol" == _typeof(n) ? n.toString() : n, r, i),
          s = function (n) {
        var r = String(n),
            o = Boolean(t.hasOwnProperty(r) && e(t[r])),
            i = r.lastIndexOf(".");

        for (; !o && -1 !== i;) {
          r = r.substr(0, i), i = r.lastIndexOf("."), o = Boolean(t.hasOwnProperty(r) && e(t[r]));
        }

        return o;
      }(n);

      return !!s && (!0 === o ? f() : setTimeout(f, 0), !0);
    }

    n.publish = function (t, r) {
      return f(t, r, !1, n.immediateExceptions);
    }, n.publishSync = function (t, r) {
      return f(t, r, !0, n.immediateExceptions);
    }, n.subscribe = function (n, e) {
      if ("function" != typeof e) return !1;
      n = "symbol" == _typeof(n) ? n.toString() : n, t.hasOwnProperty(n) || (t[n] = {});
      var o = "uid_" + String(++r);
      return t[n][o] = e, o;
    }, n.subscribeOnce = function (t, r) {
      var e = n.subscribe(t, function () {
        n.unsubscribe(e), r.apply(this, arguments);
      });
      return n;
    }, n.clearAllSubscriptions = function () {
      t = {};
    }, n.clearSubscriptions = function (n) {
      var r;

      for (r in t) {
        t.hasOwnProperty(r) && 0 === r.indexOf(n) && delete t[r];
      }
    }, n.unsubscribe = function (r) {
      var e,
          o,
          i,
          u = "string" == typeof r && (t.hasOwnProperty(r) || function (n) {
        var r;

        for (r in t) {
          if (t.hasOwnProperty(r) && 0 === r.indexOf(n)) return !0;
        }

        return !1;
      }(r)),
          f = !u && "string" == typeof r,
          s = "function" == typeof r,
          c = !1;

      if (!u) {
        for (e in t) {
          if (t.hasOwnProperty(e)) {
            if (o = t[e], f && o[r]) {
              delete o[r], c = r;
              break;
            }

            if (s) for (i in o) {
              o.hasOwnProperty(i) && o[i] === r && (delete o[i], c = !0);
            }
          }
        }

        return c;
      }

      n.clearSubscriptions(r);
    };
  }(r), "function" == typeof e && e.amd ? e(function () {
    return r;
  }) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && (void 0 !== module && module.exports && (exports = module.exports = r), exports.PubSub = r, module.exports = exports = r);
}("object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && window || void 0);

(function () {
  var resizeTimeout = null,
      windowWidthOLd = window.innerWidth;
  window.addEventListener("resize", function () {
    window.requestAnimationFrame(function () {
      if (!resizeTimeout) {
        resizeTimeout = setTimeout(function () {
          resizeTimeout = null;

          if (windowWidthOLd !== window.innerWidth) {
            windowWidthOLd = window.innerWidth;
            PubSub.publish('windowWidthResize');
          }
        }, 100);
      }
    });
  }); // btn header

  document.addEventListener('click', function (event) {
    if (event.target.closest('.btn-menu-toggle')) {
      document.body.classList.toggle('menu-show');
    }

    if (event.target.closest('.menu__link')) {
      var href = event.target.closest('.menu__link').getAttribute('href');
      href = href.split('#');

      if (document.querySelector('#' + href[1])) {
        document.body.classList.remove('menu-show');
      }
    }
  });
})();

(function (cookie) {
  if (cookie && Cookies.get('YourPrivacy') !== 'Accept') {
    cookie.classList.remove('hide');
    cookie.addEventListener('submit', function (event) {
      event.preventDefault();
      Cookies.set('YourPrivacy', 'Accept');
      cookie.classList.add('hide');
    });
  }
})(document.querySelector('.cookie'));

(function (form) {
  if (!form) {
    return;
  }
  /*
  form.addEventListener('change', event => {
  	if(event.target.classList.contains('demo-form__drop-input')) {
  		if(event.target.value.length) {
  			document.body.classList.add('uploading');
  		form.classList.add('is-uploading');
  		}
  	}
  });
  */
  // accordion table


  form.addEventListener('click', function (event) {
    if (event.target.closest('.demo-table__open')) {
      event.target.closest('tr').classList.toggle('is-open');
    }
  });
})(document.querySelector('.demo-form'));

window.Modal = function (modal) {
  if (!modal) {
    return;
  }

  var items = modal.querySelectorAll('.modal__item'),
      btns = document.querySelectorAll('[data-modal=select-wallet]'),
      wrapper = document.querySelector('.wrapper');
  var activeModal = false,
      windowScroll = window.pageYOffset;

  var hideModal = function hideModal() {
    document.body.classList.remove('modal-show');
    wrapper.style.top = 0;
    window.scrollTo(0, windowScroll);
    setTimeout(function () {
      return document.documentElement.classList.remove('scroll-behavior-off');
    });
    activeModal = false;
  };

  var modalShow = function modalShow(selector, message, secondMessage) {
    if (!activeModal) {
      windowScroll = window.pageYOffset;
    }

    activeModal = modal.querySelector('.modal__item--' + selector);

    if (message) {
      activeModal.querySelector(".modal-info__text").innerText = message;
    }

    var secondMessageEl = activeModal.querySelector(".modal-info__text-second");

    if (secondMessage) {
      secondMessageEl.innerHTML = secondMessage;
    } else {
      if (secondMessageEl != null) {
        secondMessageEl.innerHTML = '';
      }
    }

    Array.from(items, function (el) {
      return el.classList.toggle('visuallyhidden', el !== activeModal);
    });
    document.documentElement.classList.add('scroll-behavior-off');
    setTimeout(function () {
      wrapper.style.top = -windowScroll + 'px';
      document.body.classList.add('modal-show');
      window.scrollTo(0, 0);
      activeModal.focus();
    });
  };

  modal.addEventListener('click', function (event) {
    if (event.target.classList.contains('modal') || event.target.closest('.modal__close')) {
      hideModal();
    }
  });
  modal.addEventListener('modalShow', function (event) {
    return modalShow(event.detail.selector);
  });
  Array.from(btns, function (el) {
    return el.addEventListener('click', function () {
      return modalShow(el.getAttribute('data-modal'));
    });
  });
  return {
    modalShow: modalShow,
    hideModal: hideModal
  };
}(document.querySelector('.modal'));

(function (forms) {
  if (!forms.length) {
    return;
  }

  var eventModalShow = new CustomEvent("modalShow", {
    detail: {
      selector: "done"
    }
  });

  window.readySubscribe = function (data) {
    console.log(data);
    var form = document.querySelector('.form-subscribe.is-send');
    form.reset();
    form.classList.remove('is-send');
    form.querySelector('.form-subscribe__submit').disabled = false;

    if (data.result === "success") {}

    if (data.result === "error") {}

    document.querySelector('#modal-done__messange').innerHTML = data.msg;
    document.querySelector('.modal').dispatchEvent(eventModalShow);
  };

  var getQueryString = function getQueryString(formData) {
    var pairs = [];

    var _iterator = _createForOfIteratorHelper(formData.entries()),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _step$value = _slicedToArray(_step.value, 2),
            key = _step$value[0],
            value = _step$value[1];

        pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return pairs.join('&');
  };

  Array.from(forms, function (form) {
    form.addEventListener('submit', function (event) {
      event.preventDefault();
      var url = form.getAttribute('action');
      url = url.replace("/post?u=", "/post-json?u=");
      url = url + '&c=window.readySubscribe';
      url = url + '&' + getQueryString(new FormData(form));
      form.classList.add('is-send');
      form.querySelector('.form-subscribe__submit').disabled = true;
      var script = document.createElement('script');
      script.async = true;
      script.src = url;
      document.head.appendChild(script);
    });
  });
})(document.querySelectorAll('.form-subscribe'));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
